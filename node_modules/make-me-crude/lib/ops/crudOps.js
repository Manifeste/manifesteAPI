/**
 *  Define the default operations that every standard CRUD provide
 *  Namely: Create, Read, Update, Delete and Query
 *
 *  Operations, both custom and default, are called with four parameters:
 * 		- Payload {Object}
 * 			Set of parameters provided by the user. Checked against Joi object (mostly
 * 			provided by the implementer)
 * 		- Query {Array}
 * 			Set of fields to be affected by the operations (what it means varies
 * 			between operations)
 * 		- DAO {Object}
 * 			It's the database access object on which methods like 'insert' and 'find'
 * 			can be callled
 *
 * 	Remember NOT to check the payload against the Joi object provided. It'll be taken
 * 	care of by the CRUD Manager
 *
 */

var Joi = require('joi');
var q = require('q');
var _ = require('lodash');
var sha1 = require('sha1');

var ops = function( description ){
	return {
		create: {
			handler: function( payload, query, DAO ){
				// Create promise
				var deferred = q.defer();

				// Apply defaults
				_.defaults( payload, description.defaults );

				// Apply encriptions
				if( description.encrypt ){
					description.encrypt.forEach(function( element ){
						if( payload[element] ){
							payload[element] = sha1( payload[element] );
						}
					});
				}

				// Create document and save it
				var doc = new description.DAO( payload );

				doc.save(function( err, product ){
					if( err ){
						deferred.reject( err );
					} else {
						deferred.resolve( product );
					}
				});

				// Return promise
				return deferred.promise;
			}
		},
		read: {
			handler: function( payload, query, DAO ){
				var deferred = q.defer();

				var search = DAO.findOne( query );

				if( payload ){
					search.select( payload.join(' ') );
				}

				search.exec(function( err, product ){
					if( err ) {
						deferred.reject( err );
					}
					else {
						deferred.resolve( product );
					}
				});

				return deferred.promise;
			}
		},
		update: {
			handler: function( payload, query, DAO ){
				var deferred = q.defer();

				DAO.update(
						query,
						payload,
						function( err, doc ){
							if( err ){
								deferred.reject( err );
							} else {
								deferred.resolve( doc );
							}
				});

				return deferred.promise;
			}
		},
		delete: {
			handler: function( payload, query, DAO ){
				var deferred = q.defer();

				DAO.remove({
					_id: query._id
				}, function( err, product ){
					if( err ) {
						deferred.reject( err );
					}
					else {
						deferred.resolve( product );
					}
				});

				return deferred.promise;
			}
		},
		query: {
			handler: function( payload, query, DAO ){
				var deferred = q.defer();
				var search = DAO.find( query );

				if( payload ){
					search.select( payload.join(' ') );
				}

				search.exec(function( err, docs ){
					if( err ) {
						deferred.reject( err );
					}
					else {
						deferred.resolve( docs );
					}
				});

				return deferred.promise;
			}
		}
	};
};

exports = module.exports = ops;
