/**
 *  Define the default operations that every standard CRUD provide
 *  Namely: Create, Read, Update, Delete and Query
 *
 *  Operations, both custom and default, are called with four parameters:
 * 		- DAO {Object}
 * 			It's the database access object on which methods like 'insert' and 'find'
 * 			can be callled
 * 		- Payload {Object}
 * 			Set of parameters provided by the user. Checked against Joi object (mostly
 * 			provided by the implementer)
 * 		- Query {Array}
 * 			Set of fields to be affected by the operations (what it means varies
 * 			between operations)
 * 		- CRUD configuration
 * 			The configuration object provided by the user
 *
 * 	Remember NOT to check the payload against the Joi object provided. It'll be taken
 * 	care of by the CRUD Manager
 *
 */

var Joi = require('joi');
var q = require('q');

var readPayload = Joi

var defaultOps = {
	create: {
		handler: function(DAO, payload, query, options){
			var deferred = q.defer();

			var doc = new DAO( payload );

			doc.save( function( err, product ){
				if( err ) {
					deferred.reject( err );
				}
				else {
					deferred.resolve( product );
				}
			});

			return deferred.promise;
		}
	},
	read: {
		handler: function(DAO, payload, query, options){
			var deferred = q.defer();
			var search = DAO.findOne( payload );

			if( query ){
				search.select( query.join(' ') );
			}

			search.exec(function( err, product ){
				if( err ) {
					deferred.reject( err );
				}
				else {
					deferred.resolve( product );
				}
			});

			return deferred.promise;
		},
		payload: Joi.object().keys({
			'_id': Joi.string().required()
		})
	},
	update: {
		handler: function(DAO, payload, query, options){
			var deferred = q.defer();

			DAO.findOneAndUpdate(
					payload.where,
					payload.set,
					function( err, doc ){
						if( err ){
							deferred.reject( err );
						} else {
							deferred.resolve( doc );
						}
			});

			return deferred.promise;
		}
	},
	delete: {
		handler: function(DAO, payload, options){
			var deferred = q.defer();

			DAO.remove({
				_id: payload._id
			}, function( err, product ){
				if( err ) {
					deferred.reject( err );
				}
				else {
					deferred.resolve( product );
				}
			});

			return deferred.promise;
		},
		payload: Joi.object().keys({
			_id: Joi.string().required()
		})
	},
	query: {
		handler: function( DAO, payload, query, options ){
			var deferred = q.defer();
			var search = DAO.find( payload );

			if( query ){
				search.select( query.join(' ') );
			}

			search.exec(function( err, docs ){
				if( err ) {
					deferred.reject( err );
				}
				else {
					deferred.resolve( docs );
				}
			});

			return deferred.promise;
		}
	}
};

exports = module.exports = defaultOps;
