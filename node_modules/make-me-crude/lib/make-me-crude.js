/**
 * Class responsible for CRUD creation
 *
 * @class CRUDFactory
 * @constructor
 */

var _ = require('lodash');
var CrudFactory = require('./CrudFactory');
var crudOps = require('./ops/crudOps');
var subCrudOps = require('./ops/subCrudOps');

var Crude = {};

/**
 * Return a CRUD Object
 *
 * Notice that any custom operation called "where" will be ignored
 * @method crud
 *
 * @param {String} 				collName		Name of the collection to store new documents
 * @param {Object} 				config 			Configuration object
 * @param {MongoDB#Model}		config.DAO		Resource definition checked on creation
 * @param {Object}				config.defaults	Default fields
 * @param {Array<String>}		config.encrypt	List of fields that should be encrypted
 * @param {Object}				config.custom	Custom operations definition
 */
Crude.crud = function( config ){
	var Crud = assembleCrud( config );

	_.forOwn( config.subCrud, function( description, key ){
		// Make sure the subCrudOps will have access to the DAO
		description.DAO = config.DAO;

		// Assemble the subCrud
		Crud[key] = assembleSubCrud( description, description.name );
	});

	return Crud;
};

function assembleCrud( description ){
	//
	// Operations settings
	//
	var customOps = description.custom ? _.clone( description.custom ) : {};

	// Calculate array of operations
	_.defaults( customOps, crudOps( description ) );

	// Create Crud
	return CrudFactory.create( customOps, description.DAO, description );
}

function assembleSubCrud( description ){
	//
	// Operations settings
	//
	var customOps = description.custom ? _.clone( description.custom ) : {};

	// Calculate array of operations
	_.defaults( customOps, subCrudOps( description ) );

	// Create Crud
	return CrudFactory.createSubCrud( customOps, description.DAO, description );
}

exports = module.exports = Crude;
