var _ = require('lodash');

/**
 *  Query used to run commands against the database.
 *
 *  @class
 *  @constructor
 */
function Query(){
    this.query = {};
    this.isChainable = false;
};

/**
 * Modifies the object passed as query to the command
 * @method $when
 *
 * @param {Dictionary} query The item to be modified and their new values
 * @param {Boolean} [clear=true] Set it to false to clear what already exists
 */
Query.prototype.$where = function( query, clear ){
    var targetObject;

    if( this.isChainable ){
        targetObject = this;
    } else {
        // When user calls "new Query()", the query created isn't chainable.
        // The queries created by calling "$when" will always be chainable.
        // This allows us to have Cruds and Queries sharing the same prototype.
        targetObject = new this.constructor;
        targetObject.isChainable = true;
    }

    if( _.isUndefined( clear ) || clear ) {
        _.assign( targetObject.query, query );
    } else {
        targetObject.query = query;
    }

    return targetObject;
};

exports = module.exports = Query;
