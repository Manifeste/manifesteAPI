var Joi = require('joi');
var Q = require('q');
var _ = require('lodash');

var SetterFactory = {};

SetterFactory.operationCaller = function( operation, DAO, config ){
	/*
		This is the funcition that operationCaller will return
	*/
	return function(){
		/*
			This is the actual setter
		*/
		return function( payload, query ){
			if( operation.payload ){
				Joi.validate( payload, operation.payload, function( err, value ){
					if( err ){
						var deferred = Q.defer();
						deferred.reject( new Error('Payload is invalid') );

						return deferred;
					}
				});
			}
			return operation.handler( DAO, payload, query, config );
		};
	};
};

SetterFactory.create = function( ops, DAO, config ){
	var result = {};

	_.keys(ops).forEach(function( key ){
		var getter = SetterFactory.operationCaller( ops[key], DAO, config );
		result[key] = {
			'get': getter
		};
	});

	return result;
};


exports = module.exports = SetterFactory;
