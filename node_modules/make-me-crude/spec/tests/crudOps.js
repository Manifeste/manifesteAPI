var crudOps = require('../../lib/ops/crudOps');
var mongoose = require('mongoose');
var sha1 = require('sha1');
var q = require('q');

describe('Crud operations', function(){
    mongoose.connect('mongodb://localhost/test');
    var Post = mongoose.model('Post', {
        hash: String,
        titulo: String,
        texto: String
    });

    var mySubCrudOps = crudOps({
        DAO: Post,
        defaults: {
            titulo: 'God is good'
        },
        encrypt: ['hash']
    });

    describe('Document creation', function( done ){
        var jasmine = this;
        var myPost;

        // Do insertion and assigns the resulting Mongo Document to
        // myPost
        beforeAll(function( done ){
            mySubCrudOps
                .create.handler(
                    { // Payload
                        texto: 'God is good',
                        hash: 'myHash'
                    },
                    { // Query

                    }
                )
                .then(function( doc ){
                    var deferred = q.defer();

                    Post.findById( doc._id, function( err, post ){
                        if( err ){
                            deferred.reject ( err );
                        } else {
                            deferred.resolve( post );
                        }
                    });

                    return deferred.promise;
                })
                .then(function( post ){
                    myPost = post;
                })
                .finally(function(){
                    done();
                });
        });

        it('should add the document to the DB', function(){
            expect( myPost ).not.toBeUndefined();
        });

        it('should support default attributes', function(){
            expect( myPost.titulo ).toEqual( 'God is good' );
        });

        it('should encrypt specified fields', function(){
            var myHash = sha1( 'myHash' );
            expect( myPost.hash ).toEqual( myHash );
        });
    });

    describe('Document reading', function(){
        it('should return document from the DB', function(){

        });

        it('should enforce _id on query', function(){

        });

        it("should return error if query or payload ain't valid", function(){

        });

        it("should return a single object", function(){

        });
    });

    describe('Document update', function(){

    });

    describe('Document deletion', function(){

    });

    describe('Document querying', function(){

    });
});
