{
  "name": "toothache",
  "version": "1.1.2",
  "description": "Hapi plugin that removes the toothache from creating CRUD endpoints for MongoDB.",
  "main": "index.js",
  "scripts": {
    "test": "make test-lcov"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/smaxwellstewart/toothache"
  },
  "keywords": [
    "Hapi",
    "Mongo",
    "MongoDB",
    "CRUD",
    "RESTful",
    "RESOURCEful",
    "toothache"
  ],
  "author": {
    "name": "Simon Maxwell-Stewart",
    "email": "smaxwellstewart@gmail.com",
    "url": "http://smaxwellstewart.com/"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/smaxwellstewart/toothache/issues"
  },
  "homepage": "https://github.com/smaxwellstewart/toothache",
  "dependencies": {
    "bcryptjs": "^2.0.2",
    "boom": "^2.5.1",
    "extend": "^1.3.0",
    "joi": "^4.6.2",
    "mongodb": "^1.4.9"
  },
  "devDependencies": {
    "coveralls": "^2.11.1",
    "hapi": "^6.7.1",
    "hapi-auth-hawk": "^1.1.1",
    "hawk": "^2.2.3",
    "lab": "^4.2.0"
  },
  "readme": "Toothache\n---------\n\nA Hapi plugin that removes the toothache from creating CRUD endpoints for MongoDB.\n\nCurrent version: **1.1.x** [![Build Status](https://travis-ci.org/smaxwellstewart/toothache.svg?branch=master)](https://travis-ci.org/smaxwellstewart/toothache) [![Coverage Status](https://img.shields.io/coveralls/smaxwellstewart/toothache.svg)](https://coveralls.io/r/smaxwellstewart/toothache?branch=master)\n\n## What is this plugin?\n\nThis plugin instantly adds the following functionality to any mongo db...\n\n* Plug 'n' play CRUD Routes\n* Set custom fields to bcrypt and/or timestamp at doc creation, if required\n* Access control of resources.\n\n## Usage\n\nThe below is intended to be added into a hapi plugin. In our example case, we will make a `User` endpoint for a Hapi server.\n\n### Configure\n\nConfigure toothache with desired behaviour... \n\n```js\n// User model\nvar CRUD = {\n    db: db,                 // MongoDB connection\n    collection: 'users',    // MongoDB collection\n    // Create options\n    create: {\n        // Valid create payload \n        payload: Joi.object().keys({ \n            email: Joi.string().required(),\n            password: Joi.string().required()\n        }),                 \n        defaults: {         // Default values that will be added at doc creation\n            access: 'normal',\n            activated: false,\n            uId: true       // Field used for access control. This is a special field that when set to true will default to user's id \n                            // The value comes from, 'request.auth.artifacts.id' ie the id the user authenticates with\n        },\n        bcrypt: 'password', // Sets 'password' field to be bcrypted at doc creation\n        date: 'created',    // Sets 'created' field to be dated at doc creation\n        access: \"admin\"     // Sets which role can create \n    },\n    // Read options for get and find\n    read: {\n        whitelist: ['email'],   // Array of fields that will be returned, all other fields will be excluded \n        blacklist: ['password'], // Array of fields that will be removed, all other fields will be included\n        access: 'normal'        // Sets which role can read \n    },\n    // Update options\n    update: {\n        // Valid update payload\n        payload: Joi.object().keys({\n            email: Joi.string(),\n            password: Joi.string()\n        }), \n        bcrypt: 'password', // Sets 'password' field to be bcrypted at doc update\n        date: 'updated',    // Sets 'updated' field to be dated at doc update\n        access: 'normal' // Sets which role can update  \n    },\n    // Delete options\n    del: {\n        access: 'normal' // Sets which role can update \n    },\n    // Joi options when validating payloads    \n    validationOpts: {\n        abortEarly: false\n    }\n    \n};\n\nvar User = require('toothache')(CRUD);\n```\n\n### Request Handlers\n\nOnce we have configured toothache, the following request handlers will be exposed:\n\n#### `.create`\n - This handler will insert any supplied `payload` into MongoDB.\n - Accepted methods: `GET` with `payload` in URL or, `POST` or `PUT` with `payload` in request body.\n - The following toothache `options` will affect this handler:\n  - `db` - MongoDB connection object, connection [example](https://gist.github.com/smaxwellstewart/9cf26df20cb58a3f5d02). \n  - 'collection' - the MongoDB collection to create, read, update and delete from.\n  - `create.payload` - [Joi](https://github.com/hapijs/joi) object payload is validated against.\n  - `create.defaults` - Object of default fields, the payload will extend this object before insertion, \n  e.g. supplied payload will join and override this default object.\n  - `create.bcrypt` - Field name of `payload` field to be bcrypted before doc creation.\n  - `create.date` - Will add a javasctipt `new Date()` timestamp to field name at doc creation.\n  - `create.access` - If set to `admin` only admin users will be able to create a doc. If set to normal, both admin and normal users have create access.\n\n#### `.get`\n - This handler will return an individual MongoDB document.\n - Accepted methods: `GET` with an `id` parameter set in route's `path` field.\n - The following toothache `options` will affect this handler:\n  - `read.whitelist` - Array of fields that will be returned when doc is fetched.\n  - `read.blacklist` - Array of fields that will be excluded when doc is fetched. Not recommened to be set with `read.whitelist`.\n  - `read.access` - If set to `admin` only admin users will be able to read a doc. If set to normal, both admin and normal users have read access.\n\n#### `.find`\n - This handler will return an array of MongoDB documents. The search will query with a supplied `payload`, if none is supplied will return all docs. For normal users\n - Accepted methods: `GET` with `payload` in URL or, `POST` or `PUT` with `payload` in request body.\n - The following toothache `options` will affect this handler:\n  - `read.whitelist` - Array of fields that will be returned when docs are fetched.\n  - `read.blacklist` - Array of fields that will be excluded when docs are fetched. Not recommened to be set with `read.whitelist`.\n  - `read.access` - If set to `admin` only admin users will be able to read a doc. If set to normal, both admin and normal users have read access.\n\n#### `.update`\n - This route will update a doc with any supplied `payload`. The handler expects an `id` parameter to be set in route's `path` field.\n - Accepted methods: `GET` with `payload` in URL or, `POST` or `PUT` with `payload` in request body.\n - The following toothache `options` will affect this handler:\n  - `update.payload` - [Joi](https://github.com/hapijs/joi) object payload is validated against.\n  e.g. supplied payload will join and override this default object.\n  - `update.bcrypt` - Field name of `payload` field to be bcrypted when doc is updated.\n  - `update.date` - Will add a javasctipt `new Date()` timestamp to field name when doc is updated.\n  - `update.access` - If set to `admin` only admin users will be able to update a doc. If set to normal, both admin and normal users have update access. \n\n#### `.del`\n - This route will delete a doc with any supplied `payload`.\n - Accepted methods: `DELETE` with an `id` parameter set in route's `path` field.\n - The following toothache `options` will affect this handler:\n  - `del.access` - If set to `admin` only admin users will be able to delete a doc. If set to normal, both admin and normal users have delete access. \n\n*Example*\n\nThese can be used in a Hapi plugin like this...\n\n```js\n// Create\nplugin.route({\n    method: 'POST', path: '/user',\n    config: {\n        handler: User.create\n    }\n});\n\n// Get a resource, must use 'id' parameter to refer to mongo's '_id' field\nplugin.route({\n    method: 'GET', path: '/user/{id}',\n    config: {\n        handler: User.get\n    }\n});\n\n// Get All\nplugin.route({\n    method: 'GET', path: '/user',\n    config: {\n        handler: User.find\n    }\n});\n\n// Find, will search collection using payload for criteria\nplugin.route({\n    method: 'POST', path: '/user/find',\n    config: {\n        handler: User.find\n    }\n});\n\n// Update, must use 'id' parameter to refer to mongo's '_id' field\nplugin.route({\n    method: 'PUT', path: '/user/{id}',\n    config: {\n        handler: User.update\n    }\n});\n\n// Delete, must use 'id' parameter to refer to mongo's '_id' field\nplugin.route({\n    method: 'DELETE', path: '/user/{id}',\n    config: {\n        handler: User.del\n    }\n});\n```\n\n### Access Control\n\n#### Roles\n - `admin`\n - `normal`\n\n\nAccess control is only added if a route is authenticated. An `access` field must be added to user's credentials at authentication. For example:\n\n```js\n// Example: Hawk Auth Lookup\ngetCredentialsFunc: function (id, callback) {\n    var credentials = {\n        user1: {\n            key: 'pass1',\n            access: 'admin',\n            algorithm: 'sha256'\n        },\n        user2: {\n            key: 'pass2',\n            access: 'normal',\n            algorithm: 'sha256'\n        }\n    }\n    return callback(null, credentials[id]);\n}\n```\n\n - Admin users get access to all resources, they can create, read, update and delete.\n - Normal users only have access to their own resources, they can only CRUD documents that have a `uId` equal to user's authenitcation id (`request.auth.artifacts.id`)\n\n",
  "readmeFilename": "README.md",
  "_id": "toothache@1.1.2",
  "dist": {
    "shasum": "873a03939ca08e42318b5f8cdffebf9ec13e63ff"
  },
  "_from": "toothache@",
  "_resolved": "https://registry.npmjs.org/toothache/-/toothache-1.1.2.tgz"
}
